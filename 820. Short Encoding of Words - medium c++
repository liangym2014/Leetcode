A valid encoding of an array of words is any reference string s and array of indices indices such that:

words.length == indices.length
The reference string s ends with the '#' character.
For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].
Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.

 

Example 1:

Input: words = ["time", "me", "bell"]
Output: 10
Explanation: A valid encoding would be s = "time#bell#" and indices = [0, 2, 5].
words[0] = "time", the substring of s starting from indices[0] = 0 to the next '#' is underlined in "time#bell#"
words[1] = "me", the substring of s starting from indices[1] = 2 to the next '#' is underlined in "time#bell#"
words[2] = "bell", the substring of s starting from indices[2] = 5 to the next '#' is underlined in "time#bell#"
Example 2:

Input: words = ["t"]
Output: 2
Explanation: A valid encoding would be s = "t#" and indices = [0].

 

Constraints:

1 <= words.length <= 2000
1 <= words[i].length <= 7
words[i] consists of only lowercase letters.

----------------------------------------------------------------------------------------------------------------------------------------

bool cmp(const string& l, const string& r){
    return l.size() > r.size();
}

class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        vector<vector<string>> first_letter(26);
        sort(words.begin(), words.end(), cmp);
        
        for(auto& word: words){
            reverse(word.begin(), word.end());
            int idx = word[0] - 97;

            bool prefix = false;
            for(auto& str: first_letter[idx]){
                if(str.find(word) == 0){
                    prefix = true;
                    break;
                }
            }
            
            if(prefix)    continue;
            first_letter[idx].push_back(word);
        }
        
        int ans = 0;
        for(int i = 0; i < 26; ++ i){
            for(auto& str: first_letter[i])
                ans += str.size() + 1;
        }
        return ans;
    }
};
